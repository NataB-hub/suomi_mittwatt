// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HistoricalElectricityWeather {
  id                  Int  @id @default(autoincrement())
  dateId              Int  @unique
  price               Float?
  temperature         Float
  precipitation       Float
  cloudCover          Int
  windSpeed10m        Int
  shortwaveRadiation  Int
  weatherCodeId       Int
  createdDate         DateTime
  modifiedDate        DateTime

  dateData            CalendarDate @relation(fields: [dateId], references: [id])
  weatherCode         WeatherCode @relation(fields: [weatherCodeId], references: [id])
}

model ForecastElectricityPrice {
  id             Int  @id @default(autoincrement())
  dateId         Int  @unique
  price          Float?
  createdDate    DateTime @default(now())
  modifiedDate   DateTime @default(now())

  dateData       CalendarDate @relation(fields: [dateId], references: [id])
}

model CalendarDate {
  id           Int      @id @default(autoincrement())
  dateValue    DateTime @unique
  year         Int
  quarter      Int
  month        Int
  day          Int
  hour         Int
  dayOfWeek    Int
  dayName      String
  monthName    String
  yearMonth    String
  createdDate  DateTime @default(now())
  modifiedDate DateTime @default(now())

  historicalData   HistoricalElectricityWeather?
  forecastData     ForecastElectricityPrice?
}

model WeatherCode {
  id               Int      @id
  descriptionCode  String
  createdDate      DateTime @default(now())
  modifiedDate     DateTime @default(now())

  historicalWeatherCode             HistoricalElectricityWeather[]
}

model SubscriptionUser {
  id                  Int       @id @default(autoincrement())
  name                String
  email               String
  subscriptionTypeId  Int
  activeSubscription  Boolean  @default(true)
  createdDate         DateTime @default(now())
  modifiedDate        DateTime @default(now())

  subscriptionType    SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])
}

model SubscriptionType {
  id                      Int      @id @default(autoincrement())
  descriptionSubscription String
  createdDate             DateTime @default(now())
  modifiedDate            DateTime @default(now())

  subscriptionUsers       SubscriptionUser[]
}