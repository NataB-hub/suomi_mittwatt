// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model History {
  history_id            Int       @id @default(autoincrement())
  datetime              DateTime  @unique
  date_id               Int @unique
  price                 Float
  temperature           Float
  precipitation         Float
  cloud_cover           Int
  wind_speed_10m        Int
  shortwave_radiation   Int
  modified_date         DateTime  @default(now())
  weather_code_id       Int

  datedimension         DateDimension?
  weather_code          WeatherCodeDimension @relation(fields: [weather_code_id], references: [weather_code_id])
}

model Forecast {
  forecast_id       Int       @id @default(autoincrement())
  datetime          DateTime  @unique
  date_id           Int @unique
  price             Int
  modified_date     DateTime  @default(now())

  datedimension     DateDimension?
}

model DateDimension {
  date_id      Int      @id @default(autoincrement())
  date_value   DateTime @unique
  year         Int
  quarter      Int
  month        Int
  day          Int
  day_of_week  Int
  day_name     String
  month_name   String
  year_month   String
  year_quarter String
  weekend_flag Boolean
  holiday_flag Boolean

  history      History   @relation(fields: [date_id], references: [date_id])
  forecast     Forecast  @relation(fields: [date_id], references: [date_id])
}

model WeatherCodeDimension {
  weather_code_id       Int      @id @default(autoincrement())
  description_code      String

  histories             History[]

}

model SubscribeUser {
  user_id               Int       @id @default(autoincrement())
  name                  String
  email                 String
  subscription_type_id  Int
  active_subscription   Boolean   @default(true)
  modified_date         DateTime  @default(now())

  subscription_type     SubscriptionTypeDimension @relation(fields: [subscription_type_id], references: [subscription_type_id])
}

model SubscriptionTypeDimension {
  subscription_type_id        Int      @id @default(autoincrement())
  description_subscription    String

  subscribeusers              SubscribeUser[]
}